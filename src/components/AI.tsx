'use client'
/* eslint-disable no-unused-vars */
// server.js or routes/gemini.js


import { GoogleGenerativeAI } from "@google/generative-ai";
import React, { useMemo, useState } from "react";
import ReactMarkdown from "react-markdown";
export async function generateRespones(content:string,apiKey:string) {

  
  if (!apiKey) {
    throw new Error("API key is missing. Please set NEXT_PUBLIC_TINY_MCE in your .env file.");
  }
  const genAI = new GoogleGenerativeAI(apiKey); // put your key in .env
  const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });

  const prompt = `рдЖрдкрдХреЛ рдиреАрдЪреЗ рдПрдХ рд╣рд┐рдВрджреА рдХрд╡рд┐рддрд╛ рджреА рдЧрдИ рд╣реИред рдХреГрдкрдпрд╛ рдЗрд╕реЗ рдзреНрдпрд╛рди рд╕реЗ рдкрдврд╝реЗрдВ рдФрд░ рдЗрд╕рдХрд╛ рдПрдХ рднрд╛рд╡рдирд╛рддреНрдордХ, рдЧрд╣рд░рд╛рдИ рд╕реЗ рднрд░рд╛ рдФрд░ рд╕реНрдкрд╖реНрдЯ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдкреНрд░рд╕реНрддреБрдд рдХрд░реЗрдВред

рдЖрдкрдХрд╛ рдЙрддреНрддрд░ рдирд┐рдореНрдирд▓рд┐рдЦрд┐рдд рдмрд┐рдВрджреБрдУрдВ рдХреЛ рдХрд╡рд░ рдХрд░реЗ:

1. **рдкрдВрдХреНрддрд┐ рджрд░ рдкрдВрдХреНрддрд┐** рдЗрд╕ рдХрд╡рд┐рддрд╛ рдХрд╛ **рд╕рд░рд▓ рдФрд░ рд╕реНрдкрд╖реНрдЯ рдЕрд░реНрде** рд▓рд┐рдЦреЗрдВред
2. рдХрд╡рд┐рддрд╛ рдореЗрдВ **рдХрд╡рд┐ рдХреНрдпрд╛ рдХрд╣рдирд╛ рдЪрд╛рд╣рддрд╛ рд╣реИ**, рдЗрд╕рдХрд╛ **рднрд╛рд╡рд╛рд░реНрде** рдЕрдкрдиреЗ рд╢рдмреНрджреЛрдВ рдореЗрдВ рд╕рдордЭрд╛рдЗрдПред
3. рдХрд╡рд┐рддрд╛ рдореЗрдВ **рдХреМрди-рдХреМрди рд╕реА рднрд╛рд╡рдирд╛рдПрдБ** рд╡реНрдпрдХреНрдд рд╣реБрдИ рд╣реИрдВ? (рдЬреИрд╕реЗ рдкреНрд░реЗрдо, рд╡рд┐рд░рд╣, рдкреНрд░рдХреГрддрд┐, рдЖрддреНрдордордВрдерди рдЖрджрд┐)
4. рдпрджрд┐ рдХрд╡рд┐рддрд╛ рдореЗрдВ **рдкреНрд░рддреАрдХ, рд░реВрдкрдХ, рдЕрдиреБрдкреНрд░рд╛рд╕** рдпрд╛ рдХреЛрдИ рдЕрдиреНрдп **рдЕрд▓рдВрдХрд╛рд░** рдХрд╛ рдкреНрд░рдпреЛрдЧ рд╣реБрдЖ рд╣реЛ рддреЛ рдЙрдиреНрд╣реЗрдВ рдкрд╣рдЪрд╛рдирд┐рдП рдФрд░ рдЙрдирдХрд╛ рдЕрд░реНрде рд╕реНрдкрд╖реНрдЯ рдХреАрдЬрд┐рдПред
5. рдпрд╣ рдХрд╡рд┐рддрд╛ **рдкрд╛рдардХ рдХреЗ рдорди рдкрд░ рдХреНрдпрд╛ рдкреНрд░рднрд╛рд╡** рдбрд╛рд▓ рд╕рдХрддреА рд╣реИ тАФ рдпрд╣ рднреА рдмрддрд╛рдЗрдПред
6. **рдпрджрд┐ рд╕рдВрднрд╡ рд╣реЛ, рддреЛ рдХрд╡рд┐рддрд╛ рдХрд╛ рд╕рд╛рд░рд╛рдВрд╢ рднреА рджреЗрдВ**, рддрд╛рдХрд┐ рдПрдХ рд╕рд╛рдзрд╛рд░рдг рдкрд╛рдардХ рднреА рдЗрд╕ рдХрд╡рд┐рддрд╛ рдХреЛ рд╕рдордЭ рд╕рдХреЗред

рдЙрддреНрддрд░ **рд╕рд░рд▓, рдордзреБрд░, рдФрд░ рд╢рд┐рдХреНрд╖рд╛рдкреНрд░рдж рднрд╛рд╖рд╛** рдореЗрдВ рд╣реЛ тАФ рдЬреИрд╕реЗ рдПрдХ рд╢рд┐рдХреНрд╖рдХ рдЕрдкрдиреЗ рдЫрд╛рддреНрд░реЛрдВ рдХреЛ рд╕рдордЭрд╛рддрд╛ рд╣реИред

рдЕрдм рдХрд╡рд┐рддрд╛ рдХреЛ рдкрдврд╝реЗрдВ рдФрд░ рдЙрд╕рдХрд╛ рд╡рд┐рд╕реНрддреГрдд рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХрд░реЗрдВ:

рдХрд╡рд┐рддрд╛:
"""
${content}
"""
`;
  const result = await model.generateContent(prompt);
  // const explanation = await result.response.text();
  const response = await result.response.text();
  return response;
  // console.log(response);
}


const ContentExplanationPopup: React.FC<{ data: string }> = ({ data }) => {
  const [showPopup, setShowPopup] = useState(false);
  const [explanation, setExplanation] = useState("");
  const [loading, setLoading] = useState(false);

  const  content  = data;
  const apiKey = useMemo(() => process.env.NEXT_PUBLIC_GEMINI || "", []);

  async function handlePopup() {
    setShowPopup(true);

    if (!explanation) {
      setLoading(true);
      try {
        const response = await generateRespones(content,apiKey);
        setExplanation(response);
      } catch (err) {
        console.error("Error fetching explanation:", err);
        setExplanation("тЭМ рд╡реНрдпрд╛рдЦреНрдпрд╛ рд▓реЛрдб рдирд╣реАрдВ рд╣реЛ рд╕рдХреАред рдХреГрдкрдпрд╛ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред");
      }
      setLoading(false);
    }
  }

  return (
    <div className="fit-content max-width opacity-100 ">
      {/* Trigger Button */}
      <button
        onClick={handlePopup}
        className="rounded-lg bg-orange-500 px-4 py-2 text-white shadow  transition-all duration-500 hover:bg-red-500 hover:cursor-pointer"
      >
        рд╡реНрдпрд╛рдЦреНрдпрд╛
      </button>

      {/* Popup Box */}
      {showPopup && (
        <div className="absolute top-12 right-0  z-[999] max-h-96 opacity-100 w-80 overflow-y-auto rounded-xl border border-orange-300 bg-blue-200 p-4 shadow-xl transition-all duration-500 ">
          <h3 className="mb-2 text-lg font-semibold text-orange-700 z-[999]">
            рд╡реНрдпрд╛рдЦреНрдпрд╛
          </h3>

          {loading ? (
            <p className="text-sm text-gray-500 italic z-[999]">
              ЁЯФД рд╡реНрдпрд╛рдЦреНрдпрд╛ рд▓реЛрдб рд╣реЛ рд░рд╣реА рд╣реИ...
            </p>
          ) : (
            <ReactMarkdown
              components={{
                p: ({ ...props }) => (
                  <p
                    className="text-sm leading-relaxed text-gray-800"
                    {...props}
                  />
                ),
                strong: ({ ...props }) => (
                  <strong
                    className="font-semibold text-orange-700"
                    {...props}
                  />
                ),
                em: ({ ...props }) => (
                  <em className="text-gray-600 italic" {...props} />
                ),
                li: ({ ...props }) => (
                  <li className="ml-4 list-disc" {...props} />
                ),
              }}
            >
              {explanation}
            </ReactMarkdown>
          )}

          <button
            onClick={() => setShowPopup(false)}
            className="mt-4 rounded-md bg-orange-200 px-3 py-1 text-sm text-orange-800 transition-all hover:bg-orange-300 hover:cursor-pointer"
          >
            Close
          </button>
        </div>
      )}
    </div>
  );
};

export default ContentExplanationPopup;

// generateRespones(`рдЪрд╛рдБрджрдиреА рд░рд╛рдд рдХреА рдЪреБрдк рд╕реА рдмрд╛рддреЛрдВ рдореЗрдВ,
// рдорди рдХреА рд╣рд░ рдЙрд▓рдЭрди рд╕реБрд▓рдЭрддреА рдЬрд╛рддреА рд╣реИред
// рдардВрдбреА рд╣рд╡рд╛рдУрдВ рдХрд╛ рдореАрдард╛ рд╕реНрдкрд░реНрд╢,
// рдЬреИрд╕реЗ рдорд╛рдБ рдХреА рдордорддрд╛ рдмрд╣рддреА рдЬрд╛рддреА рд╣реИред

// рдЯреВрдЯреЗ рд╕рдкрдиреЛрдВ рдХреА рд░рд╛рдЦ рдореЗрдВ рднреА,
// рдХреБрдЫ рдЙрдореНрдореАрджреЗрдВ рдореБрд╕реНрдХреБрд░рд╛рддреА рд╣реИрдВред
// рд╣рд░ рдЕрдВрдзреЗрд░реЗ рдХреЗ рдмрд╛рдж рд╕реБрдмрд╣ рдЖрддреА рд╣реИ,
// рдпреЗ рдкреНрд░рдХреГрддрд┐ рд╣рдореЗрдВ рд╕рдордЭрд╛рддреА рд╣реИред
// `);